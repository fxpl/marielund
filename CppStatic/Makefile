# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all object and assembly code files generated by make.

# Set to 1 to build/run a threaded version (parallelized using OpenMP)
# Set to 0 to build/run serial a (non-threaded) version
THREADED=1

CXX = mpic++
CPPFLAGS += -DMPI_LIB	# Needed for reasons of non-thread safe unit tests.

# Points to the root of Google Test, relative to where this file is.
GTEST_DIR = ./external/googletest/googletest

# Points to the root of Google Mock, relative to where this file is.
GMOCK_DIR = ./external/googletest/googlemock

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
				$(GTEST_DIR)/include/gtest/internal/*.h

# All Google Mock headers. Note that all Google Test headers are
# included here too, as they are #included by Google Mock headers.
# Usually you shouldn't change this definition.	
GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
				$(GMOCK_DIR)/include/gmock/internal/*.h \
				$(GTEST_HEADERS)


# Flags passed to the preprocessor.
# Set Google Test and Google Mock's header directories as system
# directories, such that the compiler doesn't generate warnings in
# these headers.
G_INCLUDE= -isystem $(GTEST_DIR)/include -isystem $(GMOCK_DIR)/include -pthread -lpthread
DBG = -g
OPT = -O3 -DNDEBUG
CXXFLAGS += -I. -std=c++11 -Wall -Wextra $(DBG) $(OPT) $(G_INCLUDE) -fPIC -Wno-unused-parameter
CPPFLAGS += -fPIC -MMD -MP
ifeq (1, $(THREADED))
	CPPFLAGS += -fopenmp
endif

# Stencil source code
SRC = src
UNIT_TEST_SRC = test/unit
INTEGRATION_TEST_SRC = test/integration
PERFORMANCE_TEST_SRC = test/performance
PARALLEL_TEST_SRC = test/parallel
## Path to source files
VPATH=$(SRC)/utils:$(SRC)/iterators:$(SRC)/grid:$(SRC)/numerics:$(PERFORMANCE_TEST_SRC):test
## Path to test source files
vpath %Test.cpp $(UNIT_TEST_SRC)/utils:$(UNIT_TEST_SRC)/iterators:$(UNIT_TEST_SRC)/grid\
:$(INTEGRATION_TEST_SRC):$(PARALLEL_TEST_SRC)

# Target directories
BUILD_DIR = build
OBJ_DIR = $(BUILD_DIR)/obj
OBJ_DIR_UNIT = $(OBJ_DIR)/unit
OBJ_DIR_INTEGRATION = $(OBJ_DIR)/integration
OBJ_DIR_PERFORMANCE = $(OBJ_DIR)/performance
OBJ_DIR_PARALLEL = $(OBJ_DIR)/parallel
TEST_TARGET = $(BUILD_DIR)/test
UNIT_TEST_TARGET = $(TEST_TARGET)/unit
INTEGRATION_TEST_TARGET = $(TEST_TARGET)/integration
PERFORMANCE_TEST_TARGET = $(TEST_TARGET)/performance
PARALLEL_TEST_TARGET = $(TEST_TARGET)/parallel

# Unit tests
## Units that have a corresponding unit test
## ***NOTE TO DEVELOPERS***: If you add a unit and a corresponding unit test,
## you have to add it to one of these lists (or create a new list and add it to
## UNIT_TEST). Don't forget to make sure that VPATH and/or vpath contain the
## path(s) to the source.
UNIT_TESTED_UTIL = Math BoundaryId
UNIT_TESTED_ITERATORS = WholeFieldStepper BoundaryStepper ValueArray \
ComposedFieldBoundaryIterator ValueFieldBoundaryIterator ValueFieldIterator
UNIT_TESTED_GRID = ComputationalComposedBlock ComputationalPureBlock \
GhostRegion

## Names of unit tests
UNIT_TEST_UTIL = $(addsuffix Test, $(UNIT_TESTED_UTIL))
UNIT_TEST_ITERATORS = $(addsuffix Test, $(UNIT_TESTED_ITERATORS))
UNIT_TEST_GRID = $(addsuffix Test, $(UNIT_TESTED_GRID))
UNIT_TEST_TDSE = $(addsuffix Test, $(UNIT_TESTED_TDSE))

## Target paths for unit tests
UNIT_TEST = $(addprefix $(UNIT_TEST_TARGET)/,\
$(UNIT_TEST_UTIL) $(UNIT_TEST_ITERATORS) $(UNIT_TEST_GRID) $(UNIT_TEST_TDSE))

# Integration tests
## Names of integration tests
## ***NOTE TO DEVELOPERS***: If you add an integration test, add it to this
## list. Don't forget to make sure that VPATH and/or vpath contain the path(s)
## to the source.
INTEGRATION_TEST_NAMES = ComposedBlockIterationTest StencilApplicationTest

## Target paths for integration tests
INTEGRATION_TEST = $(addprefix $(INTEGRATION_TEST_TARGET)/, $(INTEGRATION_TEST_NAMES))

# Performance tests
## Names of performance tests
## ***NOTE TO DEVELOPERS***: If you add a performance test, add it to this list.
## Don't forget to make sure that VPATH contains the path(s) to the source.
PERFORMANCE_TEST_NAMES = StencilApplication

## Target path for performance tests
PERFORMANCE_TEST = $(addprefix $(PERFORMANCE_TEST_TARGET)/, $(PERFORMANCE_TEST_NAMES))

# Parallel tests
## Names of parallel tests
## ***NOTE TO DEVELOPERS***: If you add a test that is intended to be run on
## more than one processor, add it to this list. Don't forget to make sure that
## VPATH and/or vpath contain the path(s) to the source.
PARALLEL_TEST_NAMES = ComputationalComposedBlockParTest

## Target paths for tests intended to be run on > 1 processor
PARALLEL_TEST = $(addprefix $(PARALLEL_TEST_TARGET)/, $(PARALLEL_TEST_NAMES))


# Build targets.
.PHONY : all clean assembly unit_test run_unit_tests integration_test run_integration_tests performance_test parallel_test voodoo
## Build all executables, but don't run anything
all : $(UNIT_TEST) $(INTEGRATION_TEST) $(PARALLEL_TEST) $(PARALLEL_TEST)

## Delete all object files under the build directory. This forces rebuild, as
## all targets that are not object files depend on object files.
clean :
	find $(BUILD_DIR) -name *\.o -exec rm '{}' \; ; \
	find $(BUILD_DIR) -name *\.s -exec rm '{}' \;


## Generate assembly code for performance tests
assembly: $(OBJ_DIR_PERFORMANCE)/$(PERFORMANCE_TEST_NAMES).s
	cat $< | c++filt | grep -vE '\s+\.' > "$<_filtered"

## Build and run all unit tests
unit_test : run_unit_tests

## Build and run all integration tests
integration_test : run_integration_tests

## Build all performance tests
performance_test : $(PERFORMANCE_TEST)

## Build all parallel tests i.e. tests targeted for > 1 processor (These should
## be run separately!)
parallel_test : run_parallel_tests

## Build all tests and run all unit tests, integration tests and parallel tests
test : unit_test integration_test parallel_test performance_test

## Voodoo magic!
voodoo:
	@echo "It works. Congratulations!"

## Generate assembly code for the performance tests
$(OBJ_DIR_PERFORMANCE)/%.s : %.cpp | $(OBJ_DIR_PERFORMANCE)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S -g -masm=intel -fverbose-asm -o $@ $<

## Make object files for unit tests
$(OBJ_DIR_UNIT)/%Test.o : %Test.cpp %.hpp $(GMOCK_HEADERS) HaparandaTest.hpp | $(OBJ_DIR_UNIT)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $<

## Make object files for integration tests
$(OBJ_DIR_INTEGRATION)/%Test.o : %Test.cpp $(GMOCK_HEADERS) HaparandaTest.hpp | $(OBJ_DIR_INTEGRATION)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $<

## Make object files for performance tests
$(OBJ_DIR_PERFORMANCE)/%.o : %.cpp | $(OBJ_DIR_PERFORMANCE)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $<

## Make object files for parallel tests
$(OBJ_DIR_PARALLEL)/%Test.o : %Test.cpp $(GMOCK_HEADERS) HaparandaTest.hpp | $(OBJ_DIR_PARALLEL)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $<

## Build unit tests
$(UNIT_TEST_TARGET)/% : $(OBJ_DIR_UNIT)/%.o $(TEST_TARGET)/gmock_main.a | $(UNIT_TEST_TARGET)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

## Build integration tests
$(INTEGRATION_TEST_TARGET)/% : $(OBJ_DIR_INTEGRATION)/%.o $(TEST_TARGET)/gmock_main.a | $(INTEGRATION_TEST_TARGET)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

## Build performance tests
$(PERFORMANCE_TEST_TARGET)/% : $(OBJ_DIR_PERFORMANCE)/%.o | $(PERFORMANCE_TEST_TARGET)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

## Build parallel tests
$(PARALLEL_TEST_TARGET)/% : $(OBJ_DIR_PARALLEL)/%.o $(TEST_TARGET)/gmock_main.a | $(PARALLEL_TEST_TARGET)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

## Run all files in the unit test directory
run_unit_tests : $(UNIT_TEST)
	set -e; \
	find $(UNIT_TEST_TARGET) -name "*Test" | while read test; \
	do \
		./$$test; \
	done;

## Run all files in the integration test directory
run_integration_tests : $(INTEGRATION_TEST)
	set -e; \
	find $(INTEGRATION_TEST_TARGET) -name "*Test" | while read test; \
	do \
		./$$test; \
	done;

## Run all files in the parallel test directory
run_parallel_tests : $(PARALLEL_TEST)
	set -e; \
	find $(PARALLEL_TEST_TARGET) -name "*Test" | while read test; \
	do \
		./$$test; \
	done;

## Create target directories
$(OBJ_DIR):
	mkdir -p $(OBJ_DIR)

$(OBJ_DIR_UNIT):
	mkdir -p $(OBJ_DIR_UNIT)

$(OBJ_DIR_INTEGRATION):
	mkdir -p $(OBJ_DIR_INTEGRATION)

$(OBJ_DIR_PERFORMANCE):
	mkdir -p $(OBJ_DIR_PERFORMANCE)

$(OBJ_DIR_PARALLEL):
	mkdir -p $(OBJ_DIR_PARALLEL)

$(TEST_TARGET):
	mkdir -p $(TEST_TARGET)

$(UNIT_TEST_TARGET):
	mkdir -p $(UNIT_TEST_TARGET)

$(INTEGRATION_TEST_TARGET):
	mkdir -p $(INTEGRATION_TEST_TARGET)

$(PERFORMANCE_TEST_TARGET):
	mkdir -p $(PERFORMANCE_TEST_TARGET)

$(PARALLEL_TEST_TARGET):
	mkdir -p $(PARALLEL_TEST_TARGET)


# Dependencies from cpp files
-include $(OBJ_DIR_UNIT)/*\.d
-include $(OBJ_DIR_INTEGRATION)/*\.d
-include $(OBJ_DIR_PERFORMANCE)/*\.d
-include $(OBJ_DIR_PARALLEL)/*\.d


# Builds gmock.a and gmock_main.a.  These libraries contain both
# Google Mock and Google Test.  A test should link with either gmock.a
# or gmock_main.a, depending on whether it defines its own main()
# function.  It's fine if your test only uses features from Google
# Test (and not Google Mock).

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)

# For simplicity and to avoid depending on implementation details of
# Google Mock and Google Test, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Mock and
# Google Test compile fast and for ordinary users their source rarely
# changes.
$(OBJ_DIR)/gtest-all.o : $(GTEST_SRCS_) | $(OBJ_DIR)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
			-c -o $@ $(GTEST_DIR)/src/gtest-all.cc

$(OBJ_DIR)/gmock-all.o : $(GMOCK_SRCS_) | $(OBJ_DIR)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
			-c -o $@ $(GMOCK_DIR)/src/gmock-all.cc

$(OBJ_DIR)/gmock_main.o : $(GMOCK_SRCS_) | $(OBJ_DIR)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
			-c -o $@ test/gmock_main.cpp

$(TEST_TARGET)/gmock.a : $(OBJ_DIR)/gmock-all.o $(OBJ_DIR)/gtest-all.o | $(TEST_TARGET)
	$(AR) $(ARFLAGS) $@ $^

$(TEST_TARGET)/gmock_main.a : $(OBJ_DIR)/gmock-all.o $(OBJ_DIR)/gtest-all.o $(OBJ_DIR)/gmock_main.o | $(TEST_TARGET)
	$(AR) $(ARFLAGS) $@ $^

